/*
 * Swagger Banking System
 * This is a sample Banking applicaiton.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelApiResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FundsTransferApi {
    private ApiClient localVarApiClient;

    public FundsTransferApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FundsTransferApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for doFundTransfer
     * @param sourceAccount ID of pet to update (required)
     * @param targetAccount ID of pet to update (required)
     * @param amount Updated status of the pet (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doFundTransferCall(Long sourceAccount, Long targetAccount, String amount, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction/{sourceAccount}/{targetAccount}/{amount}"
            .replaceAll("\\{" + "sourceAccount" + "\\}", localVarApiClient.escapeString(sourceAccount.toString()))
            .replaceAll("\\{" + "targetAccount" + "\\}", localVarApiClient.escapeString(targetAccount.toString()))
            .replaceAll("\\{" + "amount" + "\\}", localVarApiClient.escapeString(amount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doFundTransferValidateBeforeCall(Long sourceAccount, Long targetAccount, String amount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceAccount' is set
        if (sourceAccount == null) {
            throw new ApiException("Missing the required parameter 'sourceAccount' when calling doFundTransfer(Async)");
        }
        
        // verify the required parameter 'targetAccount' is set
        if (targetAccount == null) {
            throw new ApiException("Missing the required parameter 'targetAccount' when calling doFundTransfer(Async)");
        }
        
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling doFundTransfer(Async)");
        }
        

        okhttp3.Call localVarCall = doFundTransferCall(sourceAccount, targetAccount, amount, _callback);
        return localVarCall;

    }

    /**
     * Check the Account Balance
     * 
     * @param sourceAccount ID of pet to update (required)
     * @param targetAccount ID of pet to update (required)
     * @param amount Updated status of the pet (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse doFundTransfer(Long sourceAccount, Long targetAccount, String amount) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = doFundTransferWithHttpInfo(sourceAccount, targetAccount, amount);
        return localVarResp.getData();
    }

    /**
     * Check the Account Balance
     * 
     * @param sourceAccount ID of pet to update (required)
     * @param targetAccount ID of pet to update (required)
     * @param amount Updated status of the pet (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> doFundTransferWithHttpInfo(Long sourceAccount, Long targetAccount, String amount) throws ApiException {
        okhttp3.Call localVarCall = doFundTransferValidateBeforeCall(sourceAccount, targetAccount, amount, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check the Account Balance (asynchronously)
     * 
     * @param sourceAccount ID of pet to update (required)
     * @param targetAccount ID of pet to update (required)
     * @param amount Updated status of the pet (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doFundTransferAsync(Long sourceAccount, Long targetAccount, String amount, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = doFundTransferValidateBeforeCall(sourceAccount, targetAccount, amount, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
